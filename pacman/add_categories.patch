diff -Naur pacman-3.5.3-orig//contrib/bacman.in pacman-3.5.3/contrib/bacman.in
--- pacman-3.5.3-orig//contrib/bacman.in	2011-04-10 00:26:31.000000000 +0200
+++ pacman-3.5.3/contrib/bacman.in	2012-03-05 16:59:39.369420814 +0100
@@ -217,6 +217,9 @@
         %GROUPS%)
             echo "group = $i"    >> .PKGINFO
         ;;
+        %CATEGORIES%)
+            echo "category = $i"    >> .PKGINFO
+        ;;
         %REPLACES%)
             echo "replaces = $i"    >> .PKGINFO
         ;;
diff -Naur pacman-3.5.3-orig//contrib/bash_completion.in pacman-3.5.3/contrib/bash_completion.in
--- pacman-3.5.3-orig//contrib/bash_completion.in	2011-02-28 18:13:17.000000000 +0100
+++ pacman-3.5.3/contrib/bash_completion.in	2012-03-05 17:00:30.945193286 +0100
@@ -56,7 +56,7 @@
   COMPREPLY=()
   _get_comp_words_by_ref cur prev
   database=('asdeps asexplicit')
-  query=('changelog check deps explicit file foreign groups info list owns
+  query=('changelog check deps explicit file foreign groups categories info list owns
           search unrequired upgrades' 'c e g i k l m o p s t u')
   remove=('cascade dbonly nodeps nosave print recursive unneeded' 'c k n p s u')
   sync=('asdeps asexplicit clean downloadonly force groups ignore ignoregroup
diff -Naur pacman-3.5.3-orig//contrib/PKGBUILD.vim pacman-3.5.3/contrib/PKGBUILD.vim
--- pacman-3.5.3-orig//contrib/PKGBUILD.vim	2011-02-28 18:13:17.000000000 +0100
+++ pacman-3.5.3/contrib/PKGBUILD.vim	2012-03-05 19:27:14.350760065 +0100
@@ -91,6 +91,11 @@
 syn match pbValidGroups /\([[:alnum:]]\|+\|-\|_\)*/ contained
 syn region pbGroupsGroup start=/^groups=(/ end=/)/ contains=pb_k_groups,pbValidGroups,shDoubleQuote,shSingleQuote
 
+" categories
+syn keyword pb_k_categories categories contained
+syn match pbValidCategories /\([[:alnum:]]\|+\|-\|_\)*/ contained
+syn region pbCategoriesGroup start=/^categories=(/ end=/)/ contains=pb_k_categories,pbValidCategories,shDoubleQuote,shSingleQuote
+
 " depends
 syn keyword pb_k_depends depends contained
 syn match pbValidDepends /\([[:alnum:]]\|+\|-\|_\)*/ contained
@@ -226,6 +231,7 @@
 hi def link pbIllegalArch Error
 
 hi def link pb_k_groups pbKeywords
+hi def link pb_k_categories pbKeywords
 hi def link pb_k_makedepends pbKeywords
 hi def link pb_k_optdepends pbKeywords
 hi def link pb_k_depends pbKeywords
diff -Naur pacman-3.5.3-orig//lib/libalpm/alpm.h pacman-3.5.3/lib/libalpm/alpm.h
--- pacman-3.5.3-orig//lib/libalpm/alpm.h	2011-06-02 23:37:17.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/alpm.h	2012-03-05 18:17:43.936524950 +0100
@@ -52,6 +52,7 @@
 typedef struct __pmpkg_t pmpkg_t;
 typedef struct __pmdelta_t pmdelta_t;
 typedef struct __pmgrp_t pmgrp_t;
+typedef struct __pmctgr_t pmctgr_t;
 typedef struct __pmtrans_t pmtrans_t;
 typedef struct __pmdepend_t pmdepend_t;
 typedef struct __pmdepmissing_t pmdepmissing_t;
@@ -288,6 +289,19 @@
  */
 alpm_list_t *alpm_db_get_grpcache(pmdb_t *db);
 
+/** Get a category entry from a package database.
+ * @param db pointer to the package database to get the category from
+ * @param name of the category
+ * @return the categories entry on success, NULL on error
+ */
+pmctgr_t *alpm_db_readctgr(pmdb_t *db, const char *name);
+
+/** Get the category cache of a package database.
+ * @param db pointer to the package database to get the category from
+ * @return the list of categories on success, NULL on error
+ */
+alpm_list_t *alpm_db_get_ctgrcache(pmdb_t *db);
+
 /** Searches a database.
  * @param db pointer to the package database to search in
  * @param needles the list of strings to search for
@@ -445,6 +459,12 @@
  */
 alpm_list_t *alpm_pkg_get_groups(pmpkg_t *pkg);
 
+/** Returns the list of package categories.
+ * @param pkg a pointer to package
+ * @return a pointer to an internal list of strings.
+ */
+alpm_list_t *alpm_pkg_get_categories(pmpkg_t *pkg);
+
 /** Returns the list of package dependencies as pmdepend_t.
  * @param pkg a pointer to package
  * @return a reference to an internal list of pmdepend_t structures.
@@ -567,6 +587,13 @@
 alpm_list_t *alpm_find_grp_pkgs(alpm_list_t *dbs, const char *name);
 
 /*
+ * Categories
+ */
+const char *alpm_ctgr_get_name(const pmctgr_t *ctgr);
+alpm_list_t *alpm_ctgr_get_pkgs(const pmctgr_t *ctgr);
+alpm_list_t *alpm_find_ctgr_pkgs(alpm_list_t *dbs, const char *name);
+
+/*
  * Sync
  */
 
diff -Naur pacman-3.5.3-orig//lib/libalpm/be_local.c pacman-3.5.3/lib/libalpm/be_local.c
--- pacman-3.5.3-orig//lib/libalpm/be_local.c	2011-05-05 19:10:51.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/be_local.c	2012-03-05 16:05:19.094567848 +0100
@@ -44,6 +44,7 @@
 #include "handle.h"
 #include "package.h"
 #include "group.h"
+#include "category.h"
 #include "deps.h"
 #include "dload.h"
 
@@ -155,6 +156,12 @@
 	return pkg->groups;
 }
 
+static alpm_list_t *_cache_get_categories(pmpkg_t *pkg)
+{
+	LAZY_LOAD(INFRQ_DESC, NULL);
+	return pkg->categories;
+}
+
 static int _cache_has_scriptlet(pmpkg_t *pkg)
 {
 	ALPM_LOG_FUNC;
@@ -314,6 +321,7 @@
 	.has_scriptlet   = _cache_has_scriptlet,
 	.get_licenses    = _cache_get_licenses,
 	.get_groups      = _cache_get_groups,
+	.get_categories  = _cache_get_categories,
 	.get_depends     = _cache_get_depends,
 	.get_optdepends  = _cache_get_optdepends,
 	.get_conflicts   = _cache_get_conflicts,
@@ -583,6 +591,12 @@
 					STRDUP(linedup, line, goto error);
 					info->groups = alpm_list_add(info->groups, linedup);
 				}
+			} else if(strcmp(line, "%CATEGORIES%") == 0) {
+				while(fgets(line, sizeof(line), fp) && strlen(_alpm_strtrim(line))) {
+					char *linedup;
+					STRDUP(linedup, line, goto error);
+					info->categories = alpm_list_add(info->categories, linedup);
+				}
 			} else if(strcmp(line, "%URL%") == 0) {
 				if(fgets(line, sizeof(line), fp) == NULL) {
 					goto error;
@@ -787,6 +801,13 @@
 				fprintf(fp, "%s\n", (char *)lp->data);
 			}
 			fprintf(fp, "\n");
+		}
+		if(info->categories) {
+			fputs("%CATEGORIES%\n", fp);
+			for(lp = info->categories; lp; lp = lp->next) {
+				fprintf(fp, "%s\n", (char *)lp->data);
+			}
+			fprintf(fp, "\n");
 		}
 		if(info->replaces) {
 			fputs("%REPLACES%\n", fp);
diff -Naur pacman-3.5.3-orig//lib/libalpm/be_package.c pacman-3.5.3/lib/libalpm/be_package.c
--- pacman-3.5.3-orig//lib/libalpm/be_package.c	2011-04-09 22:41:27.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/be_package.c	2012-03-05 16:07:01.691835822 +0100
@@ -188,6 +188,8 @@
 				STRDUP(newpkg->desc, ptr, RET_ERR(PM_ERR_MEMORY, -1));
 			} else if(strcmp(key, "group") == 0) {
 				newpkg->groups = alpm_list_add(newpkg->groups, strdup(ptr));
+			} else if(strcmp(key, "category") == 0) {
+				newpkg->categories = alpm_list_add(newpkg->categories, strdup(ptr));
 			} else if(strcmp(key, "url") == 0) {
 				STRDUP(newpkg->url, ptr, RET_ERR(PM_ERR_MEMORY, -1));
 			} else if(strcmp(key, "license") == 0) {
diff -Naur pacman-3.5.3-orig//lib/libalpm/be_sync.c pacman-3.5.3/lib/libalpm/be_sync.c
--- pacman-3.5.3-orig//lib/libalpm/be_sync.c	2011-05-05 19:10:51.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/be_sync.c	2012-03-05 16:16:46.718910697 +0100
@@ -403,6 +403,8 @@
 				READ_AND_STORE(pkg->desc);
 			} else if(strcmp(line, "%GROUPS%") == 0) {
 				READ_AND_STORE_ALL(pkg->groups);
+			} else if(strcmp(line, "%CATEGORIES%") == 0) {
+				READ_AND_STORE_ALL(pkg->categories);
 			} else if(strcmp(line, "%URL%") == 0) {
 				READ_AND_STORE(pkg->url);
 			} else if(strcmp(line, "%LICENSE%") == 0) {
diff -Naur pacman-3.5.3-orig//lib/libalpm/category.c pacman-3.5.3/lib/libalpm/category.c
--- pacman-3.5.3-orig//lib/libalpm/category.c	1970-01-01 01:00:00.000000000 +0100
+++ pacman-3.5.3/lib/libalpm/category.c	2012-03-05 16:18:04.631843881 +0100
@@ -0,0 +1,79 @@
+/*
+ *  category.c
+ *
+ *  Copyright (c) 2006-2011 Pacman Development Team <pacman-dev@archlinux.org>
+ *  Copyright (c) 2002-2006 by Judd Vinet <jvinet@zeroflux.org>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "config.h"
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+
+/* libalpm */
+#include "category.h"
+#include "alpm_list.h"
+#include "util.h"
+#include "log.h"
+#include "alpm.h"
+
+pmctgr_t *_alpm_ctgr_new(const char *name)
+{
+	pmctgr_t* ctgr;
+
+	ALPM_LOG_FUNC;
+
+	CALLOC(ctgr, 1, sizeof(pmctgr_t), RET_ERR(PM_ERR_MEMORY, NULL));
+	STRDUP(ctgr->name, name, RET_ERR(PM_ERR_MEMORY, NULL));
+
+	return(ctgr);
+}
+
+void _alpm_ctgr_free(pmctgr_t *ctgr)
+{
+	ALPM_LOG_FUNC;
+
+	if(ctgr == NULL) {
+		return;
+	}
+
+	FREE(ctgr->name);
+	/* do NOT free the contents of the list, just the nodes */
+	alpm_list_free(ctgr->packages);
+	FREE(ctgr);
+}
+
+const char SYMEXPORT *alpm_ctgr_get_name(const pmctgr_t *ctgr)
+{
+	ALPM_LOG_FUNC;
+
+	/* Sanity checks */
+	ASSERT(ctgr != NULL, return(NULL));
+
+	return ctgr->name;
+}
+
+alpm_list_t SYMEXPORT *alpm_ctgr_get_pkgs(const pmctgr_t *ctgr)
+{
+	ALPM_LOG_FUNC;
+
+	/* Sanity checks */
+	ASSERT(ctgr != NULL, return(NULL));
+
+	return ctgr->packages;
+}
+/* vim: set ts=2 sw=2 noet: */
diff -Naur pacman-3.5.3-orig//lib/libalpm/category.h pacman-3.5.3/lib/libalpm/category.h
--- pacman-3.5.3-orig//lib/libalpm/category.h	1970-01-01 01:00:00.000000000 +0100
+++ pacman-3.5.3/lib/libalpm/category.h	2012-03-05 16:17:55.695378319 +0100
@@ -0,0 +1,37 @@
+/*
+ *  category.h
+ *
+ *  Copyright (c) 2006-2011 Pacman Development Team <pacman-dev@archlinux.org>
+ *  Copyright (c) 2002-2006 by Judd Vinet <jvinet@zeroflux.org>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#ifndef _ALPM_CATEGORY_H
+#define _ALPM_CATEGORY_H
+
+#include "alpm.h"
+
+struct __pmctgr_t {
+	/** group name */
+	char *name;
+	/** list of pmpkg_t packages */
+	alpm_list_t *packages;
+};
+
+pmctgr_t *_alpm_ctgr_new(const char *name);
+void _alpm_ctgr_free(pmctgr_t *ctgr);
+
+#endif /* _ALPM_CATEGORY_H */
+
+/* vim: set ts=2 sw=2 noet: */
diff -Naur pacman-3.5.3-orig//lib/libalpm/db.c pacman-3.5.3/lib/libalpm/db.c
--- pacman-3.5.3-orig//lib/libalpm/db.c	2011-04-09 22:41:27.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/db.c	2012-03-05 16:28:39.684180269 +0100
@@ -41,6 +41,7 @@
 #include "alpm.h"
 #include "package.h"
 #include "group.h"
+#include "category.h"
 
 /** \addtogroup alpm_databases Database Functions
  * @brief Functions to query and manipulate the database of libalpm
@@ -255,6 +256,31 @@
 	return(_alpm_db_get_grpcache(db));
 }
 
+/** Get a category entry from a package database. */
+pmctgr_t SYMEXPORT *alpm_db_readctgr(pmdb_t *db, const char *name)
+{
+	ALPM_LOG_FUNC;
+
+	/* Sanity checks */
+	ASSERT(handle != NULL, return(NULL));
+	ASSERT(db != NULL, return(NULL));
+	ASSERT(name != NULL && strlen(name) != 0, return(NULL));
+
+	return(_alpm_db_get_ctgrfromcache(db, name));
+}
+
+/** Get the category cache of a package database. */
+alpm_list_t SYMEXPORT *alpm_db_get_ctgrcache(pmdb_t *db)
+{
+	ALPM_LOG_FUNC;
+
+	/* Sanity checks */
+	ASSERT(handle != NULL, return(NULL));
+	ASSERT(db != NULL, return(NULL));
+
+	return(_alpm_db_get_ctgrcache(db));
+}
+
 /** Searches a database. */
 alpm_list_t SYMEXPORT *alpm_db_search(pmdb_t *db, const alpm_list_t* needles)
 {
@@ -430,6 +456,15 @@
 					}
 				}
 			}
+			if(!matched) {
+				/* check categories */
+				for(k = alpm_pkg_get_categories(pkg); k; k = k->next) {
+					if (regexec(&reg, k->data, 0, 0, 0) == 0) {
+						matched = k->data;
+						break;
+					}
+				}
+			}
 
 			if(matched != NULL) {
 				_alpm_log(PM_LOG_DEBUG, "    search target '%s' matched '%s'\n",
@@ -696,6 +731,113 @@
 
 		if(strcmp(info->name, target) == 0) {
 			return(info);
+		}
+	}
+
+	return(NULL);
+}
+
+/* Returns a new category cache from db.
+ */
+int _alpm_db_load_ctgrcache(pmdb_t *db)
+{
+	alpm_list_t *lp;
+
+	ALPM_LOG_FUNC;
+
+	if(db == NULL) {
+		return(-1);
+	}
+
+	_alpm_log(PM_LOG_DEBUG, "loading category cache for repository '%s'\n",
+			db->treename);
+
+	for(lp = _alpm_db_get_pkgcache(db); lp; lp = lp->next) {
+		const alpm_list_t *i;
+		pmpkg_t *pkg = lp->data;
+
+		for(i = alpm_pkg_get_categories(pkg); i; i = i->next) {
+			const char *ctgrname = i->data;
+			alpm_list_t *j;
+			pmctgr_t *ctgr = NULL;
+			int found = 0;
+
+			/* first look through the category cache for a category with this name */
+			for(j = db->ctgrcache; j; j = j->next) {
+				ctgr = j->data;
+
+				if(strcmp(ctgr->name, ctgrname) == 0
+						&& !alpm_list_find_ptr(ctgr->packages, pkg)) {
+					ctgr->packages = alpm_list_add(ctgr->packages, pkg);
+					found = 1;
+					break;
+				}
+			}
+			if(found) {
+				continue;
+			}
+			/* we didn't find the category, so create a new one with this name */
+			ctgr = _alpm_ctgr_new(ctgrname);
+			ctgr->packages = alpm_list_add(ctgr->packages, pkg);
+			db->ctgrcache = alpm_list_add(db->ctgrcache, ctgr);
+		}
+	}
+
+	db->ctgrcache_loaded = 1;
+	return(0);
+}
+
+void _alpm_db_free_ctgrcache(pmdb_t *db)
+{
+	alpm_list_t *lg;
+
+	ALPM_LOG_FUNC;
+
+	if(db == NULL || !db->ctgrcache_loaded) {
+		return;
+	}
+
+	_alpm_log(PM_LOG_DEBUG, "freeing category cache for repository '%s'\n",
+	                        db->treename);
+
+	for(lg = db->ctgrcache; lg; lg = lg->next) {
+		_alpm_ctgr_free(lg->data);
+		lg->data = NULL;
+	}
+	FREELIST(db->ctgrcache);
+	db->ctgrcache_loaded = 0;
+}
+
+alpm_list_t *_alpm_db_get_ctgrcache(pmdb_t *db)
+{
+	ALPM_LOG_FUNC;
+
+	if(db == NULL) {
+		return(NULL);
+	}
+
+	if(!db->ctgrcache_loaded) {
+		_alpm_db_load_ctgrcache(db);
+	}
+
+	return(db->ctgrcache);
+}
+
+pmctgr_t *_alpm_db_get_ctgrfromcache(pmdb_t *db, const char *target)
+{
+	alpm_list_t *i;
+
+	ALPM_LOG_FUNC;
+
+	if(db == NULL || target == NULL || strlen(target) == 0) {
+		return(NULL);
+	}
+
+	for(i = _alpm_db_get_ctgrcache(db); i; i = i->next) {
+		pmctgr_t *info = i->data;
+
+		if(strcmp(info->name, target) == 0) {
+			return(info);
 		}
 	}
 
diff -Naur pacman-3.5.3-orig//lib/libalpm/db.h pacman-3.5.3/lib/libalpm/db.h
--- pacman-3.5.3-orig//lib/libalpm/db.h	2011-02-28 18:13:17.000000000 +0100
+++ pacman-3.5.3/lib/libalpm/db.h	2012-03-05 17:54:00.511030817 +0100
@@ -55,10 +55,12 @@
 	char *_path;
 	int pkgcache_loaded;
 	int grpcache_loaded;
+	int ctgrcache_loaded;
 	/* also indicates whether we are RO or RW */
 	int is_local;
 	pmpkghash_t *pkgcache;
 	alpm_list_t *grpcache;
+	alpm_list_t *ctgrcache;
 	alpm_list_t *servers;
 
 	struct db_operations *ops;
@@ -97,6 +99,11 @@
 void _alpm_db_free_grpcache(pmdb_t *db);
 alpm_list_t *_alpm_db_get_grpcache(pmdb_t *db);
 pmgrp_t *_alpm_db_get_grpfromcache(pmdb_t *db, const char *target);
+/* categories */
+int _alpm_db_load_ctgrcache(pmdb_t *db);
+void _alpm_db_free_ctgrcache(pmdb_t *db);
+alpm_list_t *_alpm_db_get_ctgrcache(pmdb_t *db);
+pmctgr_t *_alpm_db_get_ctgrfromcache(pmdb_t *db, const char *target);
 
 #endif /* _ALPM_DB_H */
 
diff -Naur pacman-3.5.3-orig//lib/libalpm/Makefile.am pacman-3.5.3/lib/libalpm/Makefile.am
--- pacman-3.5.3-orig//lib/libalpm/Makefile.am	2011-04-02 19:49:27.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/Makefile.am	2012-03-05 16:36:30.906462380 +0100
@@ -37,6 +37,7 @@
 	error.c \
 	graph.h \
 	group.h group.c \
+	category.h category.c \
 	handle.h handle.c \
 	log.h log.c \
 	package.h package.c \
diff -Naur pacman-3.5.3-orig//lib/libalpm/Makefile.in pacman-3.5.3/lib/libalpm/Makefile.in
--- pacman-3.5.3-orig//lib/libalpm/Makefile.in	2011-06-02 20:40:10.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/Makefile.in	2012-03-05 18:04:15.155995559 +0100
@@ -92,13 +92,13 @@
 	graph.h group.h group.c handle.h handle.c log.h log.c \
 	package.h package.c pkghash.h pkghash.c remove.h remove.c \
 	sync.h sync.c trans.h trans.c util.h util.c version.c md5.h \
-	md5.c
+	md5.c category.h category.c
 @HAVE_LIBSSL_FALSE@am__objects_1 = md5.lo
 am_libalpm_la_OBJECTS = add.lo alpm.lo alpm_list.lo backup.lo \
 	be_local.lo be_package.lo be_sync.lo conflict.lo db.lo \
 	delta.lo deps.lo diskspace.lo dload.lo error.lo group.lo \
 	handle.lo log.lo package.lo pkghash.lo remove.lo sync.lo \
-	trans.lo util.lo version.lo $(am__objects_1)
+	trans.lo util.lo version.lo category.lo $(am__objects_1)
 libalpm_la_OBJECTS = $(am_libalpm_la_OBJECTS)
 libalpm_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
@@ -322,7 +322,7 @@
 	diskspace.c dload.h dload.c error.c graph.h group.h group.c \
 	handle.h handle.c log.h log.c package.h package.c pkghash.h \
 	pkghash.c remove.h remove.c sync.h sync.c trans.h trans.c \
-	util.h util.c version.c $(am__append_4)
+	util.h util.c version.c category.h category.c $(am__append_4)
 libalpm_la_LDFLAGS = -no-undefined -version-info $(LIB_VERSION_INFO)
 libalpm_la_LIBADD = $(LTLIBINTL)
 all: all-recursive
@@ -414,6 +414,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dload.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/group.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/category.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/handle.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/log.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/md5.Plo@am__quote@
diff -Naur pacman-3.5.3-orig//lib/libalpm/package.c pacman-3.5.3/lib/libalpm/package.c
--- pacman-3.5.3-orig//lib/libalpm/package.c	2011-04-09 22:41:27.000000000 +0200
+++ pacman-3.5.3/lib/libalpm/package.c	2012-03-05 16:42:19.307558812 +0100
@@ -108,6 +108,7 @@
 
 static alpm_list_t *_pkg_get_licenses(pmpkg_t *pkg)   { return pkg->licenses; }
 static alpm_list_t *_pkg_get_groups(pmpkg_t *pkg)     { return pkg->groups; }
+static alpm_list_t *_pkg_get_categories(pmpkg_t *pkg) { return pkg->categories; }
 static alpm_list_t *_pkg_get_depends(pmpkg_t *pkg)    { return pkg->depends; }
 static alpm_list_t *_pkg_get_optdepends(pmpkg_t *pkg) { return pkg->optdepends; }
 static alpm_list_t *_pkg_get_conflicts(pmpkg_t *pkg)  { return pkg->conflicts; }
@@ -142,6 +143,7 @@
 
 	.get_licenses    = _pkg_get_licenses,
 	.get_groups      = _pkg_get_groups,
+	.get_categories  = _pkg_get_categories,
 	.get_depends     = _pkg_get_depends,
 	.get_optdepends  = _pkg_get_optdepends,
 	.get_conflicts   = _pkg_get_conflicts,
@@ -234,6 +236,11 @@
 	return pkg->ops->get_groups(pkg);
 }
 
+alpm_list_t SYMEXPORT *alpm_pkg_get_categories(pmpkg_t *pkg)
+{
+	return pkg->ops->get_categories(pkg);
+}
+
 alpm_list_t SYMEXPORT *alpm_pkg_get_depends(pmpkg_t *pkg)
 {
 	return pkg->ops->get_depends(pkg);
@@ -400,6 +407,7 @@
 	newpkg->licenses   = alpm_list_strdup(pkg->licenses);
 	newpkg->replaces   = alpm_list_strdup(pkg->replaces);
 	newpkg->groups     = alpm_list_strdup(pkg->groups);
+	newpkg->categories = alpm_list_strdup(pkg->categories);
 	newpkg->files      = alpm_list_strdup(pkg->files);
 	newpkg->backup     = alpm_list_strdup(pkg->backup);
 	for(i = pkg->depends; i; i = alpm_list_next(i)) {
@@ -442,6 +450,7 @@
 	FREELIST(pkg->licenses);
 	FREELIST(pkg->replaces);
 	FREELIST(pkg->groups);
+	FREELIST(pkg->categories);
 	FREELIST(pkg->files);
 	FREELIST(pkg->backup);
 	alpm_list_free_inner(pkg->depends, (alpm_list_fn_free)_alpm_dep_free);
diff -Naur pacman-3.5.3-orig//lib/libalpm/package.h pacman-3.5.3/lib/libalpm/package.h
--- pacman-3.5.3-orig//lib/libalpm/package.h	2011-02-28 18:13:17.000000000 +0100
+++ pacman-3.5.3/lib/libalpm/package.h	2012-03-05 16:42:59.100443361 +0100
@@ -61,6 +61,7 @@
 
 	alpm_list_t *(*get_licenses) (pmpkg_t *);
 	alpm_list_t *(*get_groups) (pmpkg_t *);
+	alpm_list_t *(*get_categories) (pmpkg_t *);
 	alpm_list_t *(*get_depends) (pmpkg_t *);
 	alpm_list_t *(*get_optdepends) (pmpkg_t *);
 	alpm_list_t *(*get_conflicts) (pmpkg_t *);
@@ -120,6 +121,7 @@
 	alpm_list_t *licenses;
 	alpm_list_t *replaces;
 	alpm_list_t *groups;
+	alpm_list_t *categories;
 	alpm_list_t *files;
 	alpm_list_t *backup;
 	alpm_list_t *depends;
diff -Naur pacman-3.5.3-orig//lib/libalpm/sync.c pacman-3.5.3/lib/libalpm/sync.c
--- pacman-3.5.3-orig//lib/libalpm/sync.c	2011-03-21 14:59:05.000000000 +0100
+++ pacman-3.5.3/lib/libalpm/sync.c	2012-03-05 16:56:23.816109489 +0100
@@ -245,6 +245,48 @@
 	return(pkgs);
 }
 
+/** Find category members across a list of databases.
+ * If a member exists in several databases, only the first database is used.
+ * IgnorePkg is also handled.
+ * @param dbs the list of pmdb_t *
+ * @pram name the name of the category
+ * @return the list of pmpkg_t * (caller is responsible for alpm_list_free)
+ */
+alpm_list_t SYMEXPORT *alpm_find_ctgr_pkgs(alpm_list_t *dbs,
+		const char *name)
+{
+	alpm_list_t *i, *j, *pkgs = NULL, *ignorelist = NULL;
+
+	for(i = dbs; i; i = i->next) {
+		pmdb_t *db = i->data;
+		pmctgr_t *ctgr = alpm_db_readctgr(db, name);
+
+		if(!ctgr)
+			continue;
+
+		for(j = alpm_ctgr_get_pkgs(ctgr); j; j = j->next) {
+			pmpkg_t *pkg = j->data;
+
+			if(_alpm_pkg_find(ignorelist, alpm_pkg_get_name(pkg))) {
+				continue;
+			}
+			if(_alpm_pkg_should_ignore(pkg)) {
+				ignorelist = alpm_list_add(ignorelist, pkg);
+				int install = 0;
+				QUESTION(handle->trans, PM_TRANS_CONV_INSTALL_IGNOREPKG, pkg,
+						NULL, NULL, &install);
+				if(!install)
+					continue;
+			}
+			if(!_alpm_pkg_find(pkgs, alpm_pkg_get_name(pkg))) {
+				pkgs = alpm_list_add(pkgs, pkg);
+			}
+		}
+	}
+	alpm_list_free(ignorelist);
+	return(pkgs);
+}
+
 /** Compute the size of the files that will be downloaded to install a
  * package.
  * @param newpkg the new package to upgrade to
diff -Naur pacman-3.5.3-orig//scripts/makepkg.sh.in pacman-3.5.3/scripts/makepkg.sh.in
--- pacman-3.5.3-orig//scripts/makepkg.sh.in	2011-06-07 17:49:28.000000000 +0200
+++ pacman-3.5.3/scripts/makepkg.sh.in	2012-03-05 17:31:57.349226278 +0100
@@ -46,7 +46,7 @@
 
 packaging_options=('strip' 'docs' 'libtool' 'emptydirs' 'zipman' 'purge')
 other_options=('ccache' 'distcc' 'buildflags' 'makeflags')
-splitpkg_overrides=('pkgver' 'pkgrel' 'pkgdesc' 'arch' 'license' 'groups' \
+splitpkg_overrides=('pkgver' 'pkgrel' 'pkgdesc' 'arch' 'license' 'groups' 'categories' \
                     'depends' 'optdepends' 'provides' 'conflicts' 'replaces' \
                     'backup' 'options' 'install' 'changelog')
 readonly -a packaging_options other_options splitpkg_overrides
@@ -960,6 +960,7 @@
 	[[ $license ]]    && printf "license = %s\n"   "${license[@]}"
 	[[ $replaces ]]   && printf "replaces = %s\n"  "${replaces[@]}"
 	[[ $groups ]]     && printf "group = %s\n"     "${groups[@]}"
+	[[ $categories ]] && printf "category = %s\n"  "${categories[@]}"
 	[[ $depends ]]    && printf "depend = %s\n"    "${depends[@]}"
 	[[ $optdepends ]] && printf "optdepend = %s\n" "${optdepends[@]}"
 	[[ $conflicts ]]  && printf "conflict = %s\n"  "${conflicts[@]}"
@@ -1824,7 +1825,7 @@
 	fi
 fi
 
-unset pkgname pkgbase pkgver pkgrel epoch pkgdesc url license groups provides
+unset pkgname pkgbase pkgver pkgrel epoch pkgdesc url license groups provides categories
 unset md5sums replaces depends conflicts backup source install changelog build
 unset makedepends optdepends options noextract
 
diff -Naur pacman-3.5.3-orig//scripts/repo-add.sh.in pacman-3.5.3/scripts/repo-add.sh.in
--- pacman-3.5.3-orig//scripts/repo-add.sh.in	2011-06-02 14:54:11.000000000 +0200
+++ pacman-3.5.3/scripts/repo-add.sh.in	2012-03-05 17:19:04.892985269 +0100
@@ -191,7 +191,7 @@
 	# blank out all variables
 	local pkgfile="$1"
 	local pkgname pkgver pkgdesc csize size md5sum url arch builddate packager \
-		_groups _licenses _replaces _depends _conflicts _provides _optdepends
+		_groups _categories _licenses _replaces _depends _conflicts _provides _optdepends
 
 	local OLDIFS="$IFS"
 	# IFS (field separator) is only the newline character
@@ -208,6 +208,7 @@
 		declare $var="$val"
 		case "$var" in
 			group)    _groups="$_groups$group\n" ;;
+			category) _categories="$_categories$category\n" ;;
 			license)  _licenses="$_licenses$license\n" ;;
 			replaces) _replaces="$_replaces$replaces\n" ;;
 			depend)   _depends="$_depends$depend\n" ;;
@@ -261,6 +262,7 @@
 	echo -e "%VERSION%\n$pkgver\n" >>desc
 	[[ -n $pkgdesc ]] && echo -e "%DESC%\n$pkgdesc\n" >>desc
 	write_list_entry "GROUPS" "$_groups" "desc"
+	write_list_entry "CATEGORIES" "$_categories" "desc"
 	[[ -n $csize ]] && echo -e "%CSIZE%\n$csize\n" >>desc
 	[[ -n $size ]] && echo -e "%ISIZE%\n$size\n" >>desc
 
diff -Naur pacman-3.5.3-orig//src/pacman/conf.h pacman-3.5.3/src/pacman/conf.h
--- pacman-3.5.3-orig//src/pacman/conf.h	2011-02-28 18:13:17.000000000 +0100
+++ pacman-3.5.3/src/pacman/conf.h	2012-03-05 17:35:26.289634042 +0100
@@ -63,6 +63,7 @@
 	unsigned short op_s_upgrade;
 
 	unsigned short group;
+	unsigned short category;
 	pmtransflag_t flags;
 	unsigned short noask;
 	unsigned int ask;
diff -Naur pacman-3.5.3-orig//src/pacman/package.c pacman-3.5.3/src/pacman/package.c
--- pacman-3.5.3-orig//src/pacman/package.c	2011-02-28 18:13:17.000000000 +0100
+++ pacman-3.5.3/src/pacman/package.c	2012-03-05 17:37:01.628274872 +0100
@@ -97,6 +97,7 @@
 	string_display(_("URL            :"), alpm_pkg_get_url(pkg));
 	list_display(_("Licenses       :"), alpm_pkg_get_licenses(pkg));
 	list_display(_("Groups         :"), alpm_pkg_get_groups(pkg));
+	list_display(_("Categories     :"), alpm_pkg_get_categories(pkg));
 	list_display(_("Provides       :"), alpm_pkg_get_provides(pkg));
 	list_display(_("Depends On     :"), depstrings);
 	list_display_linebreak(_("Optional Deps  :"), alpm_pkg_get_optdepends(pkg));
